create a lightening web component in LWC

opportunityCompIM.html
<template>
    <lightning-card title="Opportuities">
        <div slot="actions">
            <!-- <lightning-button label="Delete" variant="destructive" onclick={deleteSelectedRecord}></lightning-button> -->
            <lightning-button label="Show All Opps" onclick={showAllOps}></lightning-button>
            <lightning-button label="Show Won Opps" onclick={showWonOps}></lightning-button>
        </div>
       <template if:true={oppList}>
        <lightning-datatable onrowselection={handleRowSelection} key-field="Id" columns={oppColumns} data={oppList} max-row-selection="1">

        </lightning-datatable>
    </template>
    </lightning-card>
</template>



opportunityCompIM.js
import { LightningElement } from 'lwc';

import getAllOpportunities from '@salesforce/apex/OpportunityController.getAllOpportunities';
import getWonOpportunities from '@salesforce/apex/OpportunityController.getWonOpportunities';

const COLUMNS = [
    {label: 'Name', fieldName: 'Name', type: 'text'},
    {label: 'Stage', fieldName: 'StageName', type: 'text'},
    {label: 'Close Date', fieldName: 'CloseDate', type: 'text'},
    {label: 'Amount', fieldName: 'Amount', type: 'currency'},
];
export default class OpportunityCompIM extends LightningElement {

    oppList;
    oppColumns = COLUMNS;
    oppId;

    showAllOps(){
        getAllOpportunities() //call 
        .then((response)=>{
            this.oppList = response;
            //alert(JSON.stringify(response));
        })
        .catch((issue)=>{
            alert('Problem at the server side '+ JSON.stringify(issue));
        })
    }

    showWonOps(){
        getWonOpportunities() //call 
        .then((response)=>{
            this.oppList = response;
 //           alert(JSON.stringify(response));
        })
        .catch((issue)=>{
            alert('Problem at the server side '+ JSON.stringify(issue));
        })
    }

    handleRowSelection(event){
        const rowsSelected = event.detail.selectedRows;
        this.oppId = rowsSelected[0].Id;
        alert("You have selected "+this.oppId);
        
    }
}



opportunityCompIM.js-meta.xml
<?xml version="1.0" encoding="UTF-8"?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>50.0</apiVersion>
    <isExposed>true</isExposed>
    <targets>
        <target>lightning__AppPage</target>
    </targets>
</LightningComponentBundle>



create a opprtunityController class in classes

OpportuityController.cls
public with sharing class OpportunityController {
   @AuraEnabled(cacheable=true) //No DML inside this method
    public static List<Opportunity> getAllOpportunities(){

      return [SELECT Name, StageName, CloseDate, Amount FROM Opportunity];
  }

  @AuraEnabled(cacheable=true) //No DML inside this method
  public static List<Opportunity> getWonOpportunities(){
    return [SELECT Name, StageName, CloseDate, Amount FROM Opportunity
    where StageName='CLosed Won'];
}